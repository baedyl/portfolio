{"version":3,"sources":["me.jpg","components/NavBar.js","components/Profile.js","components/Home.js","components/Dev404.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","responsiveNavBar","x","document","getElementById","className","NavBar","props","elems","items","map","item","react_default","a","createElement","key","num","href","link","title","id","onClick","class","Profile","src","ProfileImage","alt","Home","components_Profile","target","rel","Dev404","App","react_router_dom","basename","process","components_NavBar","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2PCGlCC,eAAmB,WACrB,IAAIC,EAAIC,SAASC,eAAe,YACZ,WAAhBF,EAAEG,UACFH,EAAEG,WAAa,cAEfH,EAAEG,UAAY,WAuBPC,EAlBA,SAACC,GACZ,IAAMC,EACFD,EAAME,MAAMC,IAAI,SAACC,GAAD,OACZC,EAAAC,EAAAC,cAAA,KAAGC,IAAKJ,EAAKK,IAAKC,KAAON,EAAKO,MACxBP,EAAKQ,SAGnB,OAEIP,EAAAC,EAAAC,cAAA,OAAKT,UAAU,SAASe,GAAG,YACrBZ,EACFI,EAAAC,EAAAC,cAAA,KAAGG,KAAK,cAAcZ,UAAU,OAAOgB,QAAUpB,GAC7CW,EAAAC,EAAAC,cAAA,KAAGQ,MAAM,mCCfVC,SANC,WACZ,OACIX,EAAAC,EAAAC,cAAA,OAAKU,IAAMC,IAAepB,UAAU,kBAAkBqB,IAAI,qBCanDC,EAhBF,WACT,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAAA,KACAT,UAAU,WACVY,KAAK,sBACLY,OAAO,SACPC,IAAI,uBAJJ,iBCCGC,EANA,WACX,OACInB,EAAAC,EAAAC,cAAA,0DC+BOkB,MA3Bf,WASE,OACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQC,SAAUC,cAChBvB,EAAAC,EAAAC,cAAA,OAAKT,UAAU,OACbO,EAAAC,EAAAC,cAACsB,EAAD,CAAQ3B,MAXM,CAClB,CAACO,IAAK,EAAGG,MAAO,OAAQD,KAAM,KAC9B,CAACF,IAAK,EAAGG,MAAO,QAASD,KAAM,UAC/B,CAACF,IAAK,EAAGG,MAAO,WAAYD,KAAM,aAClC,CAACF,IAAK,EAAGG,MAAO,UAAWD,KAAM,YACjC,CAACF,IAAK,EAAGG,MAAO,OAAQD,KAAM,YAO1BN,EAAAC,EAAAC,cAAA,UAAQT,UAAU,cAChBO,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,KAAM,IAAKC,OAAK,EAACC,UAAWb,IACnCf,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,KAAM,SAAUE,UAAWT,IAClCnB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,KAAM,YAAaE,UAAWT,IACrCnB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,KAAM,QAASE,UAAWT,IACjCnB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,KAAM,WAAYE,UAAWT,QCd1BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAAS7C,SAASC,eAAe,SD2H3C,kBAAmB6C,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a95909bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.370b5754.jpg\";","import React from 'react';\nimport './style/NavBar.css';\n\nconst responsiveNavBar = () => {\n    let x = document.getElementById(\"myTopNav\");\n    if (x.className === \"topnav\") {\n        x.className += \" responsive\";\n    } else {\n        x.className = \"topnav\";\n    }\n}\n/**/\n\nconst NavBar = (props) => {\n    const elems = \n        props.items.map((item) => \n            <a key={item.num} href={ item.link }>\n                { item.title }\n            </a>\n        );\n    return(\n        \n        <div className=\"topnav\" id=\"myTopNav\">\n            { elems }\n            <a href=\"#responsive\" className=\"icon\" onClick={ responsiveNavBar }>\n                <i class=\"fa fa-bars\"></i>\n            </a>\n        </div>\n    );\n}\n\nexport default NavBar;","import React from 'react';\nimport ProfileImage from '../../src/me.jpg';\nimport './style/Profile.css';\n\nconst Profile = () => {\n    return(\n        <img src={ ProfileImage } className=\"Profile-picture\" alt=\"Portrait of me\" />\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\n\nconst Home = () => {\n    return(\n        <div>\n            <Profile />\n            <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >\n            Learn React\n            </a>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nconst Dev404 = () => {\n    return(\n        <h2>This part is currently under development :D</h2>\n    );\n}\n\nexport default Dev404;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Home from './components/Home';\nimport Dev404 from './components/Dev404';\n\nfunction App() {\n  const navBarItems = [\n    {num: 1, title: \"Home\", link: \"/\"},\n    {num: 2, title: \"About\", link: \"/about\"},\n    {num: 3, title: \"Projects\", link: \"/projects\"},\n    {num: 4, title: \"Contact\", link: \"/contact\"},\n    {num: 5, title: \"Blog\", link: \"/blog\"}\n  ];\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <NavBar items={ navBarItems } />\n        <header className=\"App-header\">\n          <Route path={\"/\"} exact component={Home} />\n          <Route path={\"/about\"} component={Dev404} />\n          <Route path={\"/projects\"} component={Dev404} />\n          <Route path={\"/blog\"} component={Dev404} />\n          <Route path={\"/contact\"} component={Dev404} />\n        </header>\n        \n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}